From 050051f24fc5bb14529cbae6f3a2e75914e3e09b Mon Sep 17 00:00:00 2001
From: Adam Snyder <asnyder@ea.com>
Date: Sun, 18 Oct 2020 16:17:45 -0700
Subject: [PATCH] Rename messages to common

---
 pkg/client/engine.go                 |  8 ++++----
 pkg/client/scenes/game.go            | 26 +++++++++++++-------------
 pkg/client/scenes/scene.go           |  6 +++---
 pkg/{messages => common}/messages.go |  2 +-
 pkg/server/db.go                     |  8 ++++----
 pkg/server/handler.go                | 22 +++++++++++-----------
 pkg/server/referee.go                | 12 ++++++------
 7 files changed, 42 insertions(+), 42 deletions(-)
 rename pkg/{messages => common}/messages.go (99%)

diff --git a/pkg/client/engine.go b/pkg/client/engine.go
index 0bb6048..f2c05b4 100644
--- a/pkg/client/engine.go
+++ b/pkg/client/engine.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/armsnyder/othelgo/pkg/client/scenes"
 
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
 var allScenes = map[string]scenes.Scene{
@@ -105,7 +105,7 @@ func Run() (err error) {
 	go receiveTerminalEvents(terminalEvents)
 
 	// Listen for websocket messages.
-	messageQueue := make(chan messages.AnyMessage)
+	messageQueue := make(chan common.AnyMessage)
 	messageErrors := make(chan error)
 	go receiveMessages(c, messageQueue, messageErrors)
 
@@ -152,9 +152,9 @@ func receiveTerminalEvents(ch chan<- termbox.Event) {
 	}
 }
 
-func receiveMessages(c *websocket.Conn, messageQueue chan<- messages.AnyMessage, messageErrors chan<- error) {
+func receiveMessages(c *websocket.Conn, messageQueue chan<- common.AnyMessage, messageErrors chan<- error) {
 	for {
-		var message messages.AnyMessage
+		var message common.AnyMessage
 		if err := c.ReadJSON(&message); err != nil {
 			messageErrors <- fmt.Errorf("failed to read message from websocket: %w", err)
 		}
diff --git a/pkg/client/scenes/game.go b/pkg/client/scenes/game.go
index 6318723..4c41865 100644
--- a/pkg/client/scenes/game.go
+++ b/pkg/client/scenes/game.go
@@ -3,7 +3,7 @@ package scenes
 import (
 	"github.com/nsf/termbox-go"
 
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
 type Game struct {
@@ -11,7 +11,7 @@ type Game struct {
 	player     int
 	curSquareX int
 	curSquareY int
-	board      messages.Board
+	board      common.Board
 }
 
 func (g *Game) Setup(changeScene ChangeScene, sendMessage SendMessage, setupContext SceneContext) error {
@@ -23,16 +23,16 @@ func (g *Game) Setup(changeScene ChangeScene, sendMessage SendMessage, setupCont
 
 	var message interface{}
 	if g.player == 1 {
-		message = messages.NewNewGameMessage()
+		message = common.NewNewGameMessage()
 	} else {
-		message = messages.NewJoinGameMessage()
+		message = common.NewJoinGameMessage()
 	}
 
 	return sendMessage(message)
 }
 
-func (g *Game) OnMessage(message messages.AnyMessage) error {
-	if m, ok := message.Message.(*messages.UpdateBoardMessage); ok {
+func (g *Game) OnMessage(message common.AnyMessage) error {
+	if m, ok := message.Message.(*common.UpdateBoardMessage); ok {
 		g.board = m.Board
 	}
 
@@ -41,13 +41,13 @@ func (g *Game) OnMessage(message messages.AnyMessage) error {
 
 func (g *Game) OnTerminalEvent(event termbox.Event) error {
 	dx, dy := getDirectionPressed(event)
-	g.curSquareX = clamp(g.curSquareX+dx, 0, messages.BoardSize)
-	g.curSquareY = clamp(g.curSquareY+dy, 0, messages.BoardSize)
+	g.curSquareX = clamp(g.curSquareX+dx, 0, common.BoardSize)
+	g.curSquareY = clamp(g.curSquareY+dy, 0, common.BoardSize)
 
 	if event.Key == termbox.KeyEnter {
 		g.board[g.curSquareX][g.curSquareY] = g.player
 
-		message := messages.NewPlaceDiskMessage(g.player, g.curSquareX, g.curSquareY)
+		message := common.NewPlaceDiskMessage(g.player, g.curSquareX, g.curSquareY)
 		if err := g.SendMessage(message); err != nil {
 			return err
 		}
@@ -79,8 +79,8 @@ func (g *Game) Draw() {
 	)
 
 	// Outline
-	for x := 0; x < messages.BoardSize*squareWidth+1; x++ {
-		for y := 0; y < messages.BoardSize*squareHeight+1; y++ {
+	for x := 0; x < common.BoardSize*squareWidth+1; x++ {
+		for y := 0; y < common.BoardSize*squareHeight+1; y++ {
 			var value rune
 			switch {
 			case y%squareHeight == 0 && x%squareWidth == 0:
@@ -95,8 +95,8 @@ func (g *Game) Draw() {
 	}
 
 	// Pieces
-	for i := 0; i < messages.BoardSize; i++ {
-		for j := 0; j < messages.BoardSize; j++ {
+	for i := 0; i < common.BoardSize; i++ {
+		for j := 0; j < common.BoardSize; j++ {
 			player := g.board[i][j]
 			if player == 0 {
 				continue
diff --git a/pkg/client/scenes/scene.go b/pkg/client/scenes/scene.go
index e32ff4c..4911c41 100644
--- a/pkg/client/scenes/scene.go
+++ b/pkg/client/scenes/scene.go
@@ -3,14 +3,14 @@ package scenes
 import (
 	"github.com/nsf/termbox-go"
 
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
 // Scene is responsible for the logic and view of a particular page of the application.
 // It can handle websocket messages and terminal events.
 type Scene interface {
 	Setup(changeScene ChangeScene, sendMessage SendMessage, sceneContext SceneContext) error
-	OnMessage(message messages.AnyMessage) error
+	OnMessage(message common.AnyMessage) error
 	OnTerminalEvent(event termbox.Event) error
 	Draw()
 }
@@ -36,7 +36,7 @@ func (b *scene) Setup(changeScene ChangeScene, sendMessage SendMessage, sceneCon
 	return nil
 }
 
-func (b *scene) OnMessage(_ messages.AnyMessage) error {
+func (b *scene) OnMessage(_ common.AnyMessage) error {
 	// Default implementation is a no-op.
 	return nil
 }
diff --git a/pkg/messages/messages.go b/pkg/common/messages.go
similarity index 99%
rename from pkg/messages/messages.go
rename to pkg/common/messages.go
index 914dd39..ab991d4 100644
--- a/pkg/messages/messages.go
+++ b/pkg/common/messages.go
@@ -1,4 +1,4 @@
-package messages
+package common
 
 import (
 	"encoding/json"
diff --git a/pkg/server/db.go b/pkg/server/db.go
index 3bf258b..c9fdb02 100644
--- a/pkg/server/db.go
+++ b/pkg/server/db.go
@@ -9,7 +9,7 @@ import (
 	"github.com/aws/aws-sdk-go/aws/session"
 	"github.com/aws/aws-sdk-go/service/dynamodb"
 
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
 var (
@@ -67,8 +67,8 @@ func forgetConnection(ctx context.Context, connectionID string) error {
 	return err
 }
 
-func loadBoard(ctx context.Context) (messages.Board, error) {
-	var board messages.Board
+func loadBoard(ctx context.Context) (common.Board, error) {
+	var board common.Board
 	output, err := dynamoClient().GetItemWithContext(ctx, &dynamodb.GetItemInput{
 		TableName: tableName,
 		Key:       boardKey,
@@ -83,7 +83,7 @@ func loadBoard(ctx context.Context) (messages.Board, error) {
 	return board, err
 }
 
-func saveBoard(ctx context.Context, board messages.Board) error {
+func saveBoard(ctx context.Context, board common.Board) error {
 	b, err := json.Marshal(board)
 	if err != nil {
 		return err
diff --git a/pkg/server/handler.go b/pkg/server/handler.go
index 0df2f1f..e24886a 100644
--- a/pkg/server/handler.go
+++ b/pkg/server/handler.go
@@ -8,7 +8,7 @@ import (
 
 	"github.com/aws/aws-lambda-go/events"
 
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
 func Handler(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) (resp events.APIGatewayProxyResponse, err error) {
@@ -29,7 +29,7 @@ func Handler(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) (r
 }
 
 func handleMessage(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) error {
-	var message messages.BaseMessage
+	var message common.BaseMessage
 
 	if err := json.Unmarshal([]byte(req.Body), &message); err != nil {
 		return err
@@ -38,11 +38,11 @@ func handleMessage(ctx context.Context, req events.APIGatewayWebsocketProxyReque
 	log.Printf("Handling message action %q", message.Action)
 
 	switch message.Action {
-	case messages.PlaceDiskAction:
+	case common.PlaceDiskAction:
 		return handlePlaceDisk(ctx, req)
-	case messages.NewGameAction:
+	case common.NewGameAction:
 		return handleNewGame(ctx, req)
-	case messages.JoinGameAction:
+	case common.JoinGameAction:
 		return handleJoinGame(ctx, req)
 	default:
 		return fmt.Errorf("unrecognized message action %q", message.Action)
@@ -50,7 +50,7 @@ func handleMessage(ctx context.Context, req events.APIGatewayWebsocketProxyReque
 }
 
 func handlePlaceDisk(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) error {
-	var message messages.PlaceDiskMessage
+	var message common.PlaceDiskMessage
 
 	if err := json.Unmarshal([]byte(req.Body), &message); err != nil {
 		return err
@@ -69,13 +69,13 @@ func handlePlaceDisk(ctx context.Context, req events.APIGatewayWebsocketProxyReq
 		if err := saveBoard(ctx, board); err != nil {
 			return err
 		}
-		return broadcastMessage(ctx, req.RequestContext, messages.NewUpdateBoardMessage(board))
+		return broadcastMessage(ctx, req.RequestContext, common.NewUpdateBoardMessage(board))
 	}
-	return reply(ctx, req.RequestContext, messages.NewUpdateBoardMessage(board))
+	return reply(ctx, req.RequestContext, common.NewUpdateBoardMessage(board))
 }
 
 func handleNewGame(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) error {
-	var board messages.Board
+	var board common.Board
 
 	board[3][3] = 1
 	board[3][4] = 2
@@ -86,7 +86,7 @@ func handleNewGame(ctx context.Context, req events.APIGatewayWebsocketProxyReque
 		return err
 	}
 
-	return broadcastMessage(ctx, req.RequestContext, messages.NewUpdateBoardMessage(board))
+	return broadcastMessage(ctx, req.RequestContext, common.NewUpdateBoardMessage(board))
 }
 
 func handleJoinGame(ctx context.Context, req events.APIGatewayWebsocketProxyRequest) error {
@@ -95,5 +95,5 @@ func handleJoinGame(ctx context.Context, req events.APIGatewayWebsocketProxyRequ
 		return err
 	}
 
-	return reply(ctx, req.RequestContext, messages.NewUpdateBoardMessage(board))
+	return reply(ctx, req.RequestContext, common.NewUpdateBoardMessage(board))
 }
diff --git a/pkg/server/referee.go b/pkg/server/referee.go
index efe700e..148e494 100644
--- a/pkg/server/referee.go
+++ b/pkg/server/referee.go
@@ -1,12 +1,12 @@
 package server
 
 import (
-	"github.com/armsnyder/othelgo/pkg/messages"
+	"github.com/armsnyder/othelgo/pkg/common"
 )
 
-func ApplyMove(board messages.Board, x int, y int, player int) (messages.Board, bool) {
+func ApplyMove(board common.Board, x int, y int, player int) (common.Board, bool) {
 	// validate x and y are on the even board
-	if x < 0 || x >= messages.BoardSize || y < 0 || y >= messages.BoardSize {
+	if x < 0 || x >= common.BoardSize || y < 0 || y >= common.BoardSize {
 		return board, false
 	}
 	// verify cell is empty
@@ -18,7 +18,7 @@ func ApplyMove(board messages.Board, x int, y int, player int) (messages.Board,
 	for _, v := range [][2]int{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}} {
 		nextX := v[0] + x
 		nextY := v[1] + y
-		if nextX < 0 || nextX >= messages.BoardSize || nextY < 0 || nextY >= messages.BoardSize {
+		if nextX < 0 || nextX >= common.BoardSize || nextY < 0 || nextY >= common.BoardSize {
 			continue
 		}
 
@@ -33,7 +33,7 @@ func ApplyMove(board messages.Board, x int, y int, player int) (messages.Board,
 	return board, updated
 }
 
-func ExpandVector(board *messages.Board, x int, y int, player int, v [2]int) bool {
+func ExpandVector(board *common.Board, x int, y int, player int, v [2]int) bool {
 	// By the time ExpandVector is called, we have already chosen a vector from the position of the
 	// placed disk that contains at least one of the opposing player's disks. Therefore, we need to
 	// search along the vector for the next disk belonging to the current player.
@@ -44,7 +44,7 @@ func ExpandVector(board *messages.Board, x int, y int, player int, v [2]int) boo
 	nextX := v[0] + x
 	nextY := v[1] + y
 
-	if nextX < 0 || nextX >= messages.BoardSize || nextY < 0 || nextY >= messages.BoardSize {
+	if nextX < 0 || nextX >= common.BoardSize || nextY < 0 || nextY >= common.BoardSize {
 		return false
 	}
 
-- 
2.20.1

